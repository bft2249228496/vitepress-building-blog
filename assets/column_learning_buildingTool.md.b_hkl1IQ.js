import{_ as s,c as i,o as a,U as n}from"./chunks/framework.WIFurlG-.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{"title":["前端构建工具笔记"],"date":"2023-05-14T02:55:56.000Z","tags":null},"headers":[],"relativePath":"column/learning/buildingTool.md","filePath":"column/learning/buildingTool.md"}'),e={name:"column/learning/buildingTool.md"},t=n(`<h2 id="package-json文件中scripts属性的配置" tabindex="-1">package.json文件中scripts属性的配置 <a class="header-anchor" href="#package-json文件中scripts属性的配置" aria-label="Permalink to &quot;package.json文件中scripts属性的配置&quot;">​</a></h2><p>eslint,prettier的作用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 ESLint 检查并自动修复 src 目录下所有扩展名为 .js 和 .vue 的文件</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint --ext .js,.vue --ignore-path .gitignore --fix src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自动格式化当前目录下的所有文件</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prettier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prettier --write&quot;</span></span></code></pre></div><p>自定义同时运行多个命令</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 同时运行dev命令和所有dev-child开头的命令</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;dev:main-vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm-run-all --parallel dev dev-child:*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 执行以上自定义命令的前提：1.全局安装npm-run-all;2.项目目录下安装npm-run-all:即确保在项目的 package.json 文件中的 devDependencies 或 dependencies 中包含了 npm-run-all 的依赖项;3.定义dev命令和dev-child命令</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm install </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g npm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">run</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">all</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm install </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">save</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev npm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">run</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">all</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;dev-child:vue2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cd vue2 &amp;&amp; npm run dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div><h2 id="脚手架项目运行报错-error-0308010c-digital-envelope-routines-unsupported" tabindex="-1">脚手架项目运行报错:error:0308010C:digital envelope routines::unsupported <a class="header-anchor" href="#脚手架项目运行报错-error-0308010c-digital-envelope-routines-unsupported" aria-label="Permalink to &quot;脚手架项目运行报错:error:0308010C:digital envelope routines::unsupported&quot;">​</a></h2><p>这个是node新版本引起的问题，解决方案是package.json文件的运行命令前加上SET NODE_OPTIONS=--openssl-legacy-provider</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;dev:main-vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SET NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; npm-run-all --parallel dev dev-child:*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div>`,8),l=[t];function p(h,k,r,d,o,E){return a(),i("div",null,l)}const u=s(e,[["render",p]]);export{g as __pageData,u as default};
