import{_ as s,o as n,c as a,O as e}from"./chunks/framework.5e191eb6.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{"title":["js笔记"],"date":"2023-05-15T23:09:09.000Z","tags":null},"headers":[],"relativePath":"column/learning/js.md","filePath":"column/learning/js.md"}'),l={name:"column/learning/js.md"},o=e(`<h2 id="js中大数值精度丢失" tabindex="-1">js中大数值精度丢失 <a class="header-anchor" href="#js中大数值精度丢失" aria-label="Permalink to &quot;js中大数值精度丢失&quot;">​</a></h2><p>数值超过16位后会精度丢失,此时无论是直接打印还是调用Number()，值都会发生改变导致不准确。代码示例:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">12345678901234567</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(a)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(b)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//b=12345678901234568</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12345678901234565</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(c)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//c=12345678901234564</span></span></code></pre></div><h2 id="数组的indexof和findindex" tabindex="-1">数组的indexOf和findIndex <a class="header-anchor" href="#数组的indexof和findindex" aria-label="Permalink to &quot;数组的indexOf和findIndex&quot;">​</a></h2><p>相同点:findIndex()与indexOf()都是返回数组中第一个满足条件的项的下标,如果不存在返回-1 不同点:findIndex比indexOf更强大一些，可以通过回调函数查找对象数组，indexOf只能查找数组中指定的值，不过indexOf可以指定开始查找位置的索引</p>`,5),p=[o];function t(c,r,i,d,A,y){return n(),a("div",null,p)}const _=s(l,[["render",t]]);export{D as __pageData,_ as default};
